node {
  name: "weights_and_biases/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal/RandomStandardNormal"
  input: "weights_and_biases/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal"
  op: "Add"
  input: "weights_and_biases/random_normal/mul"
  input: "weights_and_biases/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight"
  input: "weights_and_biases/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_1/RandomStandardNormal"
  input: "weights_and_biases/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1"
  op: "Add"
  input: "weights_and_biases/random_normal_1/mul"
  input: "weights_and_biases/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/output_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/output_weight"
  input: "weights_and_biases/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_weight/read"
  op: "Identity"
  input: "weights_and_biases/output_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_2/RandomStandardNormal"
  input: "weights_and_biases/random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2"
  op: "Add"
  input: "weights_and_biases/random_normal_2/mul"
  input: "weights_and_biases/random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/gate_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_weight"
  input: "weights_and_biases/random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/read"
  op: "Identity"
  input: "weights_and_biases/gate_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_3/RandomStandardNormal"
  input: "weights_and_biases/random_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3"
  op: "Add"
  input: "weights_and_biases/random_normal_3/mul"
  input: "weights_and_biases/random_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/random_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias"
  input: "weights_and_biases/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/output_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/output_bias"
  input: "weights_and_biases/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_bias/read"
  op: "Identity"
  input: "weights_and_biases/output_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_bias"
  input: "weights_and_biases/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/read"
  op: "Identity"
  input: "weights_and_biases/gate_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "placeholders/input_placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "placeholders/label"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "placeholders/last_hidden"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
}
node {
  name: "placeholders/last_cell"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
}
node {
  name: "to_gates/input_concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "to_gates/input_concat"
  op: "ConcatV2"
  input: "placeholders/input_placeholder"
  input: "placeholders/last_hidden"
  input: "placeholders/last_cell"
  input: "to_gates/input_concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "to_gates/f_w_m"
  op: "MatMul"
  input: "to_gates/input_concat"
  input: "weights_and_biases/forget_and_input_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "to_gates/f_b_a"
  op: "Add"
  input: "to_gates/f_w_m"
  input: "weights_and_biases/forget_and_input_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "to_gates/g_w_m"
  op: "MatMul"
  input: "to_gates/input_concat"
  input: "weights_and_biases/gate_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "to_gates/g_b_a"
  op: "Add"
  input: "to_gates/g_w_m"
  input: "weights_and_biases/gate_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "non-linearity/sigmoid_forget"
  op: "Sigmoid"
  input: "to_gates/f_b_a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "non-linearity/scalar"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "non-linearity/mul"
  op: "Mul"
  input: "non-linearity/scalar"
  input: "non-linearity/sigmoid_forget"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "non-linearity/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "non-linearity/making_input_gate"
  op: "Add"
  input: "non-linearity/ones"
  input: "non-linearity/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "non-linearity/sigmoid_input"
  op: "Sigmoid"
  input: "non-linearity/making_input_gate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "non-linearity/tanh_gate"
  op: "Tanh"
  input: "to_gates/g_b_a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forget_gate/forget_gating"
  op: "Mul"
  input: "non-linearity/sigmoid_forget"
  input: "placeholders/last_cell"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "suggestion_node/input_determiner"
  op: "Mul"
  input: "non-linearity/sigmoid_input"
  input: "non-linearity/tanh_gate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "suggestion_node/input_and_gate_gating"
  op: "Add"
  input: "suggestion_node/input_determiner"
  input: "forget_gate/forget_gating"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/input_concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "output_gate/input_concat"
  op: "ConcatV2"
  input: "placeholders/input_placeholder"
  input: "placeholders/last_hidden"
  input: "suggestion_node/input_and_gate_gating"
  input: "output_gate/input_concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "output_gate/o_w_m"
  op: "MatMul"
  input: "output_gate/input_concat"
  input: "weights_and_biases/output_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output_gate/o_b_a"
  op: "Add"
  input: "output_gate/o_w_m"
  input: "weights_and_biases/output_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/sigmoid_output"
  op: "Sigmoid"
  input: "output_gate/o_b_a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/cell_squashing"
  op: "Tanh"
  input: "suggestion_node/input_and_gate_gating"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/next_hidden"
  op: "Mul"
  input: "output_gate/sigmoid_output"
  input: "output_gate/cell_squashing"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/WHTO_w_m"
  op: "MatMul"
  input: "output_gate/next_hidden"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output_gate/BHTO_b_a"
  op: "Add"
  input: "output_gate/WHTO_w_m"
  input: "weights_and_biases/outwards_propagating_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output_gate/output"
  op: "Relu"
  input: "output_gate/BHTO_b_a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Sub"
  op: "Sub"
  input: "output_gate/output"
  input: "placeholders/label"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Square"
  op: "Square"
  input: "loss/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/Sum"
  op: "Sum"
  input: "loss/Square"
  input: "loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/Fill"
  op: "Fill"
  input: "optimizer/gradients/Shape"
  input: "optimizer/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/Fill"
  input: "optimizer/gradients/loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sum_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sum_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/loss/Sum_grad/Reshape"
  input: "optimizer/gradients/loss/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Const"
  op: "Const"
  input: "^optimizer/gradients/loss/Sum_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Mul"
  op: "Mul"
  input: "loss/Sub"
  input: "optimizer/gradients/loss/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/loss/Sum_grad/Tile"
  input: "optimizer/gradients/loss/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/loss/Square_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/loss/Square_grad/Mul_1"
  input: "^optimizer/gradients/loss/Sub_grad/Neg"
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/loss/Square_grad/Mul_1"
  input: "^optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/Square_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/loss/Sub_grad/Neg"
  input: "^optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/Sub_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/output_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency"
  input: "output_gate/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/output_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/output_grad/ReluGrad"
  input: "^optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/output_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/output_grad/ReluGrad"
  input: "^optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/output_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/control_dependency"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul_1"
  op: "MatMul"
  input: "output_gate/next_hidden"
  input: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul"
  input: "^optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul"
  input: "^optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul_1"
  input: "^optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/WHTO_w_m_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/next_hidden_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/control_dependency"
  input: "output_gate/cell_squashing"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/next_hidden_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/control_dependency"
  input: "output_gate/sigmoid_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/next_hidden_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/next_hidden_grad/Mul"
  input: "^optimizer/gradients/output_gate/next_hidden_grad/Mul_1"
}
node {
  name: "optimizer/gradients/output_gate/next_hidden_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/next_hidden_grad/Mul"
  input: "^optimizer/gradients/output_gate/next_hidden_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/next_hidden_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/next_hidden_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/next_hidden_grad/Mul_1"
  input: "^optimizer/gradients/output_gate/next_hidden_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/next_hidden_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "output_gate/sigmoid_output"
  input: "optimizer/gradients/output_gate/next_hidden_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/cell_squashing_grad/TanhGrad"
  op: "TanhGrad"
  input: "output_gate/cell_squashing"
  input: "optimizer/gradients/output_gate/next_hidden_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_b_a_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
}
node {
  name: "optimizer/gradients/output_gate/o_b_a_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
  input: "^optimizer/gradients/output_gate/o_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_b_a_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
  input: "^optimizer/gradients/output_gate/o_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/sigmoid_output_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_w_m_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/output_gate/o_b_a_grad/tuple/control_dependency"
  input: "weights_and_biases/output_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_w_m_grad/MatMul_1"
  op: "MatMul"
  input: "output_gate/input_concat"
  input: "optimizer/gradients/output_gate/o_b_a_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_w_m_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/o_w_m_grad/MatMul"
  input: "^optimizer/gradients/output_gate/o_w_m_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/o_w_m_grad/MatMul"
  input: "^optimizer/gradients/output_gate/o_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/o_w_m_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/o_w_m_grad/MatMul_1"
  input: "^optimizer/gradients/output_gate/o_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/o_w_m_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/mod"
  op: "FloorMod"
  input: "output_gate/input_concat/axis"
  input: "optimizer/gradients/output_gate/input_concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "optimizer/gradients/output_gate/input_concat_grad/mod"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape_1"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Slice"
  op: "Slice"
  input: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency"
  input: "optimizer/gradients/output_gate/input_concat_grad/ConcatOffset"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Slice_1"
  op: "Slice"
  input: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency"
  input: "optimizer/gradients/output_gate/input_concat_grad/ConcatOffset:1"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/Slice_2"
  op: "Slice"
  input: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency"
  input: "optimizer/gradients/output_gate/input_concat_grad/ConcatOffset:2"
  input: "optimizer/gradients/output_gate/input_concat_grad/Shape_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/output_gate/input_concat_grad/Slice"
  input: "^optimizer/gradients/output_gate/input_concat_grad/Slice_1"
  input: "^optimizer/gradients/output_gate/input_concat_grad/Slice_2"
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/output_gate/input_concat_grad/Slice"
  input: "^optimizer/gradients/output_gate/input_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/input_concat_grad/Slice"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/output_gate/input_concat_grad/Slice_1"
  input: "^optimizer/gradients/output_gate/input_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/input_concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/output_gate/input_concat_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "optimizer/gradients/output_gate/input_concat_grad/Slice_2"
  input: "^optimizer/gradients/output_gate/input_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/input_concat_grad/Slice_2"
      }
    }
  }
}
node {
  name: "optimizer/gradients/AddN"
  op: "AddN"
  input: "optimizer/gradients/output_gate/cell_squashing_grad/TanhGrad"
  input: "optimizer/gradients/output_gate/input_concat_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/cell_squashing_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/AddN"
}
node {
  name: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/AddN"
  input: "^optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/cell_squashing_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/AddN"
  input: "^optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/output_gate/cell_squashing_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_determiner_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency"
  input: "non-linearity/tanh_gate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_determiner_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency"
  input: "non-linearity/sigmoid_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_determiner_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/suggestion_node/input_determiner_grad/Mul"
  input: "^optimizer/gradients/suggestion_node/input_determiner_grad/Mul_1"
}
node {
  name: "optimizer/gradients/suggestion_node/input_determiner_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/suggestion_node/input_determiner_grad/Mul"
  input: "^optimizer/gradients/suggestion_node/input_determiner_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/suggestion_node/input_determiner_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/suggestion_node/input_determiner_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/suggestion_node/input_determiner_grad/Mul_1"
  input: "^optimizer/gradients/suggestion_node/input_determiner_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/suggestion_node/input_determiner_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forget_gate/forget_gating_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency_1"
  input: "placeholders/last_cell"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forget_gate/forget_gating_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/suggestion_node/input_and_gate_gating_grad/tuple/control_dependency_1"
  input: "non-linearity/sigmoid_forget"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forget_gate/forget_gating_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forget_gate/forget_gating_grad/Mul"
  input: "^optimizer/gradients/forget_gate/forget_gating_grad/Mul_1"
}
node {
  name: "optimizer/gradients/forget_gate/forget_gating_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forget_gate/forget_gating_grad/Mul"
  input: "^optimizer/gradients/forget_gate/forget_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forget_gate/forget_gating_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forget_gate/forget_gating_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forget_gate/forget_gating_grad/Mul_1"
  input: "^optimizer/gradients/forget_gate/forget_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forget_gate/forget_gating_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "non-linearity/sigmoid_input"
  input: "optimizer/gradients/suggestion_node/input_determiner_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
  op: "TanhGrad"
  input: "non-linearity/tanh_gate"
  input: "optimizer/gradients/suggestion_node/input_determiner_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/making_input_gate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
}
node {
  name: "optimizer/gradients/non-linearity/making_input_gate_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
  input: "^optimizer/gradients/non-linearity/making_input_gate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/making_input_gate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
  input: "^optimizer/gradients/non-linearity/making_input_gate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/sigmoid_input_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_b_a_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
}
node {
  name: "optimizer/gradients/to_gates/g_b_a_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
  input: "^optimizer/gradients/to_gates/g_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_b_a_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
  input: "^optimizer/gradients/to_gates/g_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/tanh_gate_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/non-linearity/mul_grad/Shape"
  input: "optimizer/gradients/non-linearity/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/non-linearity/making_input_gate_grad/tuple/control_dependency_1"
  input: "non-linearity/sigmoid_forget"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/non-linearity/mul_grad/Mul"
  input: "optimizer/gradients/non-linearity/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/non-linearity/mul_grad/Sum"
  input: "optimizer/gradients/non-linearity/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Mul_1"
  op: "Mul"
  input: "non-linearity/scalar"
  input: "optimizer/gradients/non-linearity/making_input_gate_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/non-linearity/mul_grad/Mul_1"
  input: "optimizer/gradients/non-linearity/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/non-linearity/mul_grad/Sum_1"
  input: "optimizer/gradients/non-linearity/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/non-linearity/mul_grad/Reshape"
  input: "^optimizer/gradients/non-linearity/mul_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/mul_grad/Reshape"
  input: "^optimizer/gradients/non-linearity/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/mul_grad/Reshape_1"
  input: "^optimizer/gradients/non-linearity/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_w_m_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/to_gates/g_b_a_grad/tuple/control_dependency"
  input: "weights_and_biases/gate_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_w_m_grad/MatMul_1"
  op: "MatMul"
  input: "to_gates/input_concat"
  input: "optimizer/gradients/to_gates/g_b_a_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_w_m_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/to_gates/g_w_m_grad/MatMul"
  input: "^optimizer/gradients/to_gates/g_w_m_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/to_gates/g_w_m_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/to_gates/g_w_m_grad/MatMul"
  input: "^optimizer/gradients/to_gates/g_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/to_gates/g_w_m_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/g_w_m_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/to_gates/g_w_m_grad/MatMul_1"
  input: "^optimizer/gradients/to_gates/g_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/to_gates/g_w_m_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/AddN_1"
  op: "AddN"
  input: "optimizer/gradients/forget_gate/forget_gating_grad/tuple/control_dependency"
  input: "optimizer/gradients/non-linearity/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forget_gate/forget_gating_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "non-linearity/sigmoid_forget"
  input: "optimizer/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_b_a_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
}
node {
  name: "optimizer/gradients/to_gates/f_b_a_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
  input: "^optimizer/gradients/to_gates/f_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_b_a_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
  input: "^optimizer/gradients/to_gates/f_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/non-linearity/sigmoid_forget_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_w_m_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/to_gates/f_b_a_grad/tuple/control_dependency"
  input: "weights_and_biases/forget_and_input_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_w_m_grad/MatMul_1"
  op: "MatMul"
  input: "to_gates/input_concat"
  input: "optimizer/gradients/to_gates/f_b_a_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_w_m_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/to_gates/f_w_m_grad/MatMul"
  input: "^optimizer/gradients/to_gates/f_w_m_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/to_gates/f_w_m_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/to_gates/f_w_m_grad/MatMul"
  input: "^optimizer/gradients/to_gates/f_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/to_gates/f_w_m_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/to_gates/f_w_m_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/to_gates/f_w_m_grad/MatMul_1"
  input: "^optimizer/gradients/to_gates/f_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/to_gates/f_w_m_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/beta1_power/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "optimizer/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/beta1_power/read"
  op: "Identity"
  input: "optimizer/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "optimizer/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/beta2_power/Assign"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "optimizer/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/beta2_power/read"
  op: "Identity"
  input: "optimizer/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight/Adam"
  input: "weights_and_biases/forget_and_input_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight/Adam_1"
  input: "weights_and_biases/forget_and_input_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/output_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/output_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/output_weight/Adam"
  input: "weights_and_biases/output_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/output_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/output_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/output_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/output_weight/Adam_1"
  input: "weights_and_biases/output_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/output_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/gate_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/gate_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_weight/Adam"
  input: "weights_and_biases/gate_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/gate_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 51
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_weight/Adam_1"
  input: "weights_and_biases/gate_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/gate_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 25
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 25
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias/Adam"
  input: "weights_and_biases/forget_and_input_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias/Adam_1"
  input: "weights_and_biases/forget_and_input_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/forget_and_input_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/forget_and_input_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/output_bias/Adam"
  input: "weights_and_biases/output_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/output_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/output_bias/Adam_1"
  input: "weights_and_biases/output_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/output_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/output_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_bias/Adam"
  input: "weights_and_biases/gate_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/gate_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/gate_bias/Adam_1"
  input: "weights_and_biases/gate_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/gate_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/gate_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "optimizer/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "optimizer/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/forget_and_input_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/forget_and_input_weight"
  input: "weights_and_biases/forget_and_input_weight/Adam"
  input: "weights_and_biases/forget_and_input_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/to_gates/f_w_m_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/output_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/output_weight"
  input: "weights_and_biases/output_weight/Adam"
  input: "weights_and_biases/output_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/output_gate/o_w_m_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/gate_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/gate_weight"
  input: "weights_and_biases/gate_weight/Adam"
  input: "weights_and_biases/gate_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/to_gates/g_w_m_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/output_gate/WHTO_w_m_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/forget_and_input_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/forget_and_input_bias"
  input: "weights_and_biases/forget_and_input_bias/Adam"
  input: "weights_and_biases/forget_and_input_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/to_gates/f_b_a_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/output_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/output_bias"
  input: "weights_and_biases/output_bias/Adam"
  input: "weights_and_biases/output_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/output_gate/o_b_a_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/gate_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/gate_bias"
  input: "weights_and_biases/gate_bias/Adam"
  input: "weights_and_biases/gate_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/to_gates/g_b_a_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/output_gate/BHTO_b_a_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/mul"
  op: "Mul"
  input: "optimizer/beta1_power/read"
  input: "optimizer/Adam/beta1"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "optimizer/Adam/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "optimizer/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/Adam/mul_1"
  op: "Mul"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/beta2"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
}
node {
  name: "optimizer/Adam/Assign_1"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "optimizer/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/Adam"
  op: "NoOp"
  input: "^optimizer/Adam/Assign"
  input: "^optimizer/Adam/Assign_1"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/forget_and_input_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/gate_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/output_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
}
node {
  name: "summaries_and_saver/W_Forget_and_Input/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Forget_and_Input"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Forget_and_Input"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Forget_and_Input/tag"
  input: "weights_and_biases/forget_and_input_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Output/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Output"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Output"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Output/tag"
  input: "weights_and_biases/output_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Gate/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Gate"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Gate"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Gate/tag"
  input: "weights_and_biases/gate_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Hidden_to_Out/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Hidden_to_Out"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Hidden_to_Out"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Hidden_to_Out/tag"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Forget/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Forget"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Forget"
  op: "HistogramSummary"
  input: "summaries_and_saver/Forget/tag"
  input: "non-linearity/sigmoid_forget"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Input/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Input"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Input"
  op: "HistogramSummary"
  input: "summaries_and_saver/Input/tag"
  input: "non-linearity/sigmoid_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Output/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Output"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Output"
  op: "HistogramSummary"
  input: "summaries_and_saver/Output/tag"
  input: "output_gate/sigmoid_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Gate/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Gate"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Gate"
  op: "HistogramSummary"
  input: "summaries_and_saver/Gate/tag"
  input: "non-linearity/tanh_gate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Cell_State/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Cell_State"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Cell_State"
  op: "HistogramSummary"
  input: "summaries_and_saver/Cell_State/tag"
  input: "output_gate/cell_squashing"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Forget_and_Input/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Forget_and_Input"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Forget_and_Input"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Forget_and_Input/tag"
  input: "weights_and_biases/forget_and_input_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Output/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Output"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Output"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Output/tag"
  input: "weights_and_biases/output_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Gate/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Gate"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Gate"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Gate/tag"
  input: "weights_and_biases/gate_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Hidden_to_Out/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Hidden_to_Out"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Hidden_to_Out"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Hidden_to_Out/tag"
  input: "weights_and_biases/outwards_propagating_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Loss"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Loss"
  op: "ScalarSummary"
  input: "summaries_and_saver/Loss/tags"
  input: "loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Merge/MergeSummary"
  op: "MergeSummary"
  input: "summaries_and_saver/W_Forget_and_Input"
  input: "summaries_and_saver/W_Output"
  input: "summaries_and_saver/W_Gate"
  input: "summaries_and_saver/W_Hidden_to_Out"
  input: "summaries_and_saver/Forget"
  input: "summaries_and_saver/Input"
  input: "summaries_and_saver/Output"
  input: "summaries_and_saver/Gate"
  input: "summaries_and_saver/Cell_State"
  input: "summaries_and_saver/B_Forget_and_Input"
  input: "summaries_and_saver/B_Output"
  input: "summaries_and_saver/B_Gate"
  input: "summaries_and_saver/B_Hidden_to_Out"
  input: "summaries_and_saver/Loss"
  attr {
    key: "N"
    value {
      i: 14
    }
  }
}
node {
  name: "summaries_and_saver/save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "optimizer/beta1_power"
        string_val: "optimizer/beta2_power"
        string_val: "weights_and_biases/forget_and_input_bias"
        string_val: "weights_and_biases/forget_and_input_bias/Adam"
        string_val: "weights_and_biases/forget_and_input_bias/Adam_1"
        string_val: "weights_and_biases/forget_and_input_weight"
        string_val: "weights_and_biases/forget_and_input_weight/Adam"
        string_val: "weights_and_biases/forget_and_input_weight/Adam_1"
        string_val: "weights_and_biases/gate_bias"
        string_val: "weights_and_biases/gate_bias/Adam"
        string_val: "weights_and_biases/gate_bias/Adam_1"
        string_val: "weights_and_biases/gate_weight"
        string_val: "weights_and_biases/gate_weight/Adam"
        string_val: "weights_and_biases/gate_weight/Adam_1"
        string_val: "weights_and_biases/output_bias"
        string_val: "weights_and_biases/output_bias/Adam"
        string_val: "weights_and_biases/output_bias/Adam_1"
        string_val: "weights_and_biases/output_weight"
        string_val: "weights_and_biases/output_weight/Adam"
        string_val: "weights_and_biases/output_weight/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_bias"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_weight"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam_1"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2"
  op: "SaveV2"
  input: "summaries_and_saver/save/Const"
  input: "summaries_and_saver/save/SaveV2/tensor_names"
  input: "summaries_and_saver/save/SaveV2/shape_and_slices"
  input: "optimizer/beta1_power"
  input: "optimizer/beta2_power"
  input: "weights_and_biases/forget_and_input_bias"
  input: "weights_and_biases/forget_and_input_bias/Adam"
  input: "weights_and_biases/forget_and_input_bias/Adam_1"
  input: "weights_and_biases/forget_and_input_weight"
  input: "weights_and_biases/forget_and_input_weight/Adam"
  input: "weights_and_biases/forget_and_input_weight/Adam_1"
  input: "weights_and_biases/gate_bias"
  input: "weights_and_biases/gate_bias/Adam"
  input: "weights_and_biases/gate_bias/Adam_1"
  input: "weights_and_biases/gate_weight"
  input: "weights_and_biases/gate_weight/Adam"
  input: "weights_and_biases/gate_weight/Adam_1"
  input: "weights_and_biases/output_bias"
  input: "weights_and_biases/output_bias/Adam"
  input: "weights_and_biases/output_bias/Adam_1"
  input: "weights_and_biases/output_weight"
  input: "weights_and_biases/output_weight/Adam"
  input: "weights_and_biases/output_weight/Adam_1"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/control_dependency"
  op: "Identity"
  input: "summaries_and_saver/save/Const"
  input: "^summaries_and_saver/save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@summaries_and_saver/save/Const"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "optimizer/beta1_power"
        string_val: "optimizer/beta2_power"
        string_val: "weights_and_biases/forget_and_input_bias"
        string_val: "weights_and_biases/forget_and_input_bias/Adam"
        string_val: "weights_and_biases/forget_and_input_bias/Adam_1"
        string_val: "weights_and_biases/forget_and_input_weight"
        string_val: "weights_and_biases/forget_and_input_weight/Adam"
        string_val: "weights_and_biases/forget_and_input_weight/Adam_1"
        string_val: "weights_and_biases/gate_bias"
        string_val: "weights_and_biases/gate_bias/Adam"
        string_val: "weights_and_biases/gate_bias/Adam_1"
        string_val: "weights_and_biases/gate_weight"
        string_val: "weights_and_biases/gate_weight/Adam"
        string_val: "weights_and_biases/gate_weight/Adam_1"
        string_val: "weights_and_biases/output_bias"
        string_val: "weights_and_biases/output_bias/Adam"
        string_val: "weights_and_biases/output_bias/Adam_1"
        string_val: "weights_and_biases/output_weight"
        string_val: "weights_and_biases/output_weight/Adam"
        string_val: "weights_and_biases/output_weight/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_bias"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_weight"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam_1"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2"
  op: "RestoreV2"
  input: "summaries_and_saver/save/Const"
  input: "summaries_and_saver/save/RestoreV2/tensor_names"
  input: "summaries_and_saver/save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "summaries_and_saver/save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_1"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "summaries_and_saver/save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_2"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias"
  input: "summaries_and_saver/save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_3"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_4"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_5"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight"
  input: "summaries_and_saver/save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_6"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_7"
  op: "Assign"
  input: "weights_and_biases/forget_and_input_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/forget_and_input_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_8"
  op: "Assign"
  input: "weights_and_biases/gate_bias"
  input: "summaries_and_saver/save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_9"
  op: "Assign"
  input: "weights_and_biases/gate_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_10"
  op: "Assign"
  input: "weights_and_biases/gate_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_11"
  op: "Assign"
  input: "weights_and_biases/gate_weight"
  input: "summaries_and_saver/save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_12"
  op: "Assign"
  input: "weights_and_biases/gate_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_13"
  op: "Assign"
  input: "weights_and_biases/gate_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/gate_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_14"
  op: "Assign"
  input: "weights_and_biases/output_bias"
  input: "summaries_and_saver/save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_15"
  op: "Assign"
  input: "weights_and_biases/output_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_16"
  op: "Assign"
  input: "weights_and_biases/output_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_17"
  op: "Assign"
  input: "weights_and_biases/output_weight"
  input: "summaries_and_saver/save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_18"
  op: "Assign"
  input: "weights_and_biases/output_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_19"
  op: "Assign"
  input: "weights_and_biases/output_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/output_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_20"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "summaries_and_saver/save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_21"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_22"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_23"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "summaries_and_saver/save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_24"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_25"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/restore_all"
  op: "NoOp"
  input: "^summaries_and_saver/save/Assign"
  input: "^summaries_and_saver/save/Assign_1"
  input: "^summaries_and_saver/save/Assign_10"
  input: "^summaries_and_saver/save/Assign_11"
  input: "^summaries_and_saver/save/Assign_12"
  input: "^summaries_and_saver/save/Assign_13"
  input: "^summaries_and_saver/save/Assign_14"
  input: "^summaries_and_saver/save/Assign_15"
  input: "^summaries_and_saver/save/Assign_16"
  input: "^summaries_and_saver/save/Assign_17"
  input: "^summaries_and_saver/save/Assign_18"
  input: "^summaries_and_saver/save/Assign_19"
  input: "^summaries_and_saver/save/Assign_2"
  input: "^summaries_and_saver/save/Assign_20"
  input: "^summaries_and_saver/save/Assign_21"
  input: "^summaries_and_saver/save/Assign_22"
  input: "^summaries_and_saver/save/Assign_23"
  input: "^summaries_and_saver/save/Assign_24"
  input: "^summaries_and_saver/save/Assign_25"
  input: "^summaries_and_saver/save/Assign_3"
  input: "^summaries_and_saver/save/Assign_4"
  input: "^summaries_and_saver/save/Assign_5"
  input: "^summaries_and_saver/save/Assign_6"
  input: "^summaries_and_saver/save/Assign_7"
  input: "^summaries_and_saver/save/Assign_8"
  input: "^summaries_and_saver/save/Assign_9"
}
node {
  name: "init"
  op: "NoOp"
  input: "^optimizer/beta1_power/Assign"
  input: "^optimizer/beta2_power/Assign"
  input: "^weights_and_biases/forget_and_input_bias/Adam/Assign"
  input: "^weights_and_biases/forget_and_input_bias/Adam_1/Assign"
  input: "^weights_and_biases/forget_and_input_bias/Assign"
  input: "^weights_and_biases/forget_and_input_weight/Adam/Assign"
  input: "^weights_and_biases/forget_and_input_weight/Adam_1/Assign"
  input: "^weights_and_biases/forget_and_input_weight/Assign"
  input: "^weights_and_biases/gate_bias/Adam/Assign"
  input: "^weights_and_biases/gate_bias/Adam_1/Assign"
  input: "^weights_and_biases/gate_bias/Assign"
  input: "^weights_and_biases/gate_weight/Adam/Assign"
  input: "^weights_and_biases/gate_weight/Adam_1/Assign"
  input: "^weights_and_biases/gate_weight/Assign"
  input: "^weights_and_biases/output_bias/Adam/Assign"
  input: "^weights_and_biases/output_bias/Adam_1/Assign"
  input: "^weights_and_biases/output_bias/Assign"
  input: "^weights_and_biases/output_weight/Adam/Assign"
  input: "^weights_and_biases/output_weight/Adam_1/Assign"
  input: "^weights_and_biases/output_weight/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Adam/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Adam_1/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Adam/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Adam_1/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Assign"
}
versions {
  producer: 26
}
